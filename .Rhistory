return(m)
}
data <- x$get()
m <- solve(data, ...)
getinverse <- function() m
x$setmatrix(m)
m
}
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
getinverse <- function(solve) m
x$setmatrix(m)
m
}
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
#m <- solve(data, ...)
#*******getinverse <- function() m
#x$setmatrix(m)
#m
m <- inverse(data, ...)
x$setinverse(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
#m <- solve(data, ...)
#*******getinverse <- function() m
#x$setmatrix(m)
#m
m <- solve(data, ...)
x$setmatrix(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
makeCacheMatrix <- function(x = matrix(),nrow=2, ncol=2) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
#m <- solve(data, ...)
#*******getinverse <- function() m
#x$setmatrix(m)
#m
m <- solve(data, ...)
x$setmatrix(m)
x$getinverse(m)
m
}
>    amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
makeCacheMatrix <- function(x = matrix(),nrow=2, ncol=2) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
getinverse  <- function(solve) m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
#m <- solve(data, ...)
#*******getinverse <- function() m
#x$setmatrix(m)
#m
m <- solve(data, ...)
x$setmatrix(m)
x$getinverse(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix(),nrow=2, ncol=2) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
getinverse  <- function(solve) m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
x$getinverse(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix(),nrow=2, ncol=2) {
m <- NULL
set <- function(y) {
x <<- y     #x takes on the value of y
m <<- NULL  #m is set to NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m         #this function returns matrix 'm', is used in cacheSolve
getinverse  <- function(solve) m  #this function creates the inverse of matrix 'm'
list(set = set, get = get,   #this is a list of the individual funtions (above) within makeCacheMatrix
setmatrix = setmatrix,
getmatrix = getmatrix,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
x$getinverse(m)
m
}
source("cachematrix.R")
source("submitscript1.R")
getwd()
setwd ("C:/R Studio/Coursera/Course Introduction to R")
source("cachematrix.R")
setwd ("C:/R Studio/Coursera/ProgrammingAssignment2")
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
makeCacheMatrix <- function(x = matrix(),nrow=2, ncol=2) {
m <- NULL
set <- function(y) {
x <<- y     #x takes on the value of y
m <<- NULL  #m is set to NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m         #this function returns matrix 'm', is used in cacheSolve
getinverse  <- function(solve) m  #this function creates the inverse of matrix 'm'
list(set = set, get = get,   #this is a list of the individual funtions (above) within makeCacheMatrix
setmatrix = setmatrix,
getmatrix = getmatrix,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
x$getinverse(m)
m
}
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
source("cachematrix.R")
makeCacheMatrix <- function(x = matrix(),nrow=2, ncol=2) {
m <- NULL
set <- function(y) {
x <<- y     #x takes on the value of y
m <<- NULL  #m is set to NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m         #this function returns matrix 'm', is used in cacheSolve
getinverse  <- function(solve) m  #this function creates the inverse of matrix 'm'
list(set = set, get = get,   #this is a list of the individual funtions (above) within makeCacheMatrix
setmatrix = setmatrix,
getmatrix = getmatrix,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix(),nrow=2, ncol=2) {
m <- NULL
set <- function(y) {
x <<- y     #x takes on the value of y
m <<- NULL  #m is set to NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m         #this function returns matrix 'm', is used in cacheSolve
getinverse  <- function(solve) m  #this function creates the inverse of matrix 'm'
list(set = set, get = get,   #this is a list of the individual funtions (above) within makeCacheMatrix
setmatrix = setmatrix,
getmatrix = getmatrix,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getmatrix()    #m takes on the value of x from the getmatrix funciton
if(!is.null(m)) {
message("getting cached data")  #if m is null/has no values, give message "getting cached data"
return(m)
}
data <- x$get()
m <- solve(data, ...)  #solve function inverts the matrix, using data
x$setmatrix(m)
x$getinverse(m)
m
}
library(datasets)
data(iris)
?iris
names$iris
names
iris
mean(iris$sepal.length)
x <- mean(iris$sepal.length)
x <- mean(iris$Sepal.Length)
x
newdata <- x[ which(iris$Sepal.Species=="virginica"), ]
newdata <- subset(x, Sepal.Species == "virginica")
newdata <- subset(x, Species == "virginica")
newdata <- subset(iris, Species == "virginica")
newdata
x
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
x <- c(rnorm(10),runif(10),rnorm(10,1))
f <- gl(3,10)  #'gl' function generates factors by specifying the pattern of their levels
tapply(x,f,mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
cyl4 <- subset(mtcars, cyl == 4)
cyl4
cyl8 <- subset(mtcars, cyl == 8)
cyl8
x <- mean(cyl4$hp)
x
y <- mean(cyl8$hp)
y
z <- abs(x-y)
z
z1 <- abs(y-x)
z1
debug(ls)
debug(ls)
ls
debug(lm)
lm(y~x)
with(iris, tapply(Sepal.Length, Species, mean))
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
x <- mean(cyl4$hp)
x
y <- mean(cyl8$hp)
y
z <- abs(x-y)
z
z1 <- abs(y-x)
z1
x <- mean(cyl4$hp)
x
y <- mean(cyl8$hp)
y
z <- abs(x-y)
z
z1 <- abs(y-x)
z1
x <- mean(cyl4$mpg)
x
y <- mean(cyl8$mpg)
y
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mymatrix(c(2,4,6,8),2,2)
mymatrix <- (c(2,4,6,8),2,2)
mymatrix <- (c(2,4,6,8) 2,2)
mymatrix
mymatrix <- (c(2,4,6,8) 2,2)
mymatrix <- matrix(c(2,4,6,8) 2,2)
mymatrix <- matrix(c(2,4,6,8), 2,2)
mymatrix
m
undebug(ls)
undebug(lm)
mymatrix <- matrix(c(2,4,6,8), 2,2)
mymatrix
mymatrix <- matrix(c(2,4,6,8), 2,2)
mymatrix
mymatrix <- matrix(c(2,4,6,8), 2,2)
mymatrix
solve(mymatrix)
#create an example matrix
mymatrix <- matrix(c(2,4,6,8), 2,2)
#check out what it looks like:
mymatrix
#now create the inverse:
solve(mymatrix)
#create an example matrix
mymatrix <- matrix(c(2,4,6,8), 2,2)
#check out what it looks like:
mymatrix
#now create the inverse:
solve(mymatrix)
#create an example matrix:
mymatrix <- matrix(c(2,4,6,8), 2,2)
#check out what it looks like:
mymatrix
#now create the inverse:
solve(mymatrix)
#create an example matrix:
mymatrix <- matrix(c(2,4,6,8), 2,2)
#check out what it looks like:
mymatrix
#now create the inverse:
solve(mymatrix)
#create an example matrix:
mymatrix <- matrix(c(2,4,6,8), 2,2)
#check out what it looks like:
mymatrix
#now create the inverse:
solve(mymatrix)
#create an example matrix:
mymatrix <- matrix(c(2,4,6,8), 2,2)
#check out what it looks like:
mymatrix
#now create the inverse, using the function 'solve' with your matrix 'mymatrix':
solve(mymatrix)
z <- 2
f <- function(x,y) {
x^2+y/z
}
f(2,4)
z <- 3
f(2,4)
f <- function(x,y) {
x^2+y/a
}
f(2,4)
a <- 3
f(2,4)
a <- 2
f(2,4)
f2 <- function (x,y){
x + y
}
f2(f,2)
f2 <- function (x,y){
x<--f
x + y
}
f2(1,2)
f2 <- function (x,y){
x + y
}
f2(1,2)
f2 <- function (x) {x * x}
f2 <- function (x) {x * x}
f2 <- function (x) {x * x}
environment(f)
make.power <- function (n){
pow <- function(x){
x^n}
pow
}
make.power(2)
cube <- make.power(3)
square <- make.power(2)
cube
make.power <- function (n){
pow <- function(x){
x^n}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube
make.power <- function(n){
pow <- function(q){
q^n}
pow
}
cube(3)
square(3)
make.power <- function(n){
power <- function(q){
q^n}
power
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(3)
y <- 10
y
f <- function(x) {
y <- 2
y^2 + g(x)
}
y
g <- function(x){
x*y
}
f(3)
